*****************************************************
***************** VENDREDI 02 AVRIL *****************
*****************************************************

*****************
fichier routes.yaml
on a enlevé le # des commentaires pour laisser les index path et controller sans commentaire

*****************
Shortcut pour phpstorm : https://resources.jetbrains.com/storage/products/phpstorm/docs/PhpStorm_ReferenceCard.pdf?_ga=2.236815939.372208002.1617349536-134175520.1617349536

*****************
Exercice:
1- Créer un nouveau controller : UserController

2- Créer une nouvelle route/user/register

3- Affichez sur la page h1. INSCRIPTION

*****************
Commande de terminal

- pour voir les pages crée:
php bin/console debug:router

*****************
@Route("/category", name="default_category", methods={"GET"})
On va mettre un paramètre de route à la place de "/category" pour pouvoir mettre plusieurs catégorie ex: politique, société etc.
on crée un paramètre et symfony va récupérer l'alias
@Route("/{alias}", name="default_category", methods={"GET"})

*****************
TWIG
https://twig.symfony.com/

{{ }} = echo dans php

*****************************************************
***************** MARDI 06 AVRIL *****************
*****************************************************

*****************
BASE DE DONNEES

Pour mettre en place une base de données sur Symfony (ORM = object relation maping)

Configuration BDD:
Dans le projet Actuel News -> .env -> DATABASE_URL=« « 

les fichiers env. sont des fichiers d'environnements
éditer des variables en fonction d'ou on se situe
.env.local va prendre le dessus de .env mais uniquement sur notre machine. Pas pour vocation d'être partager uniquement pour nous.
On y configure notre base de données
On remplace:
DATABASE_URL="mysql://db_user:db_password@127.0.0.1:3306/db_name?serverVersion=5.7"
par:
DATABASE_URL="mysql://root:root@127.0.0.1:8889/actunews?serverVersion=5.7"

Permet de créer la BDD depuis le fichier .env et .env.local
On note la commande ci-dessous dans le terminal de phpStorm
php bin/console doctrine:database:create

Pour créer des classes:
php bin/console make:entity Category (=nom de la classe avec la Maj)

Puis on lui attribut des propriétés:
ici on mets juste => name
puis => string entrer
puis caractère => 80
puis sans nom => no ou entrer
puis est-ce que j'ai une autre propriété? On ajoute l'alias => alias
puis => string entrer
puis caractère => 80
puis no
puis entrer 2 fois

===> SYMFONY A CREE LA CLASSE POUR NOUS (sur src->Entity->Category.php)
Symfony peut faire la mise en place sql

Pour refaire une classe ARTICLE il faut fermer et rouvrir le terminal, vérifier qu'on est bien sur le dossier et remettre la commande:
php bin/console make:entity Post (ici le nom de la classe c'est Post)
Propriété => title
Type=> entrer string
Length=> entrer 255
fields null => entrer

Autres propriété?=> alias
Puis propriété => image
Type=> entrer string
Length=> entrer 255
fields null => entrer

Puis propriété content
Type=> text
fields null => NO

*****************
CREATION DES UTILISATEURS

Il faut OBLIGATOIREMENT faire la commande ci-dessous en premier si on a une table qui va contenir des utilisateurs:
php bin/console make:user
puis entrer à chaque question=> user => yes => property => yes

Puis on ajoute des propriétés:
php bin/console make:entity User

Puis new propriété name => firstname
puis string =>entrer
puis lenght =>80
puis field => entrer (no)

Puis new propriété name => lastname
puis string =>entrer
puis lenght =>80
puis field => entrer (no)

Entrer pour sortir

Pour automatiquement mettre notre base de donnée à jour:
php bin/console doctrine:schema:update --force

Il crée mes 3 tables (catégory, post et user) dans PhpMyAdmin
Toutes les modifications se font uniquement dans nos entités
On ne fait pas de modification de nos propriétés sur PhpMyAdmin, on va sur le fichier de notre entité (exemple post.php)
Puis on refait la commande pour mettre à jour la BDD.


php bin/console doctrine:database:drop --force ===>>> supprimer la BDD


*****************
CREER DES RELATIONS ENTRE LES TABLES DE LA BDD

On se met sur l'entité POST:
php bin/console make:entity Post
New property name => Category
Si on veut 1 cat par artcile category si plusieurs cat par article categories au pluriel
Field type => relation
Classe => Category
Relation Type?=> ManyToOne
Post category null? => NO
Add new property to category? => Yes
New field name inside Category => Yes
Automatically delete => no

Puis on ajoute une nouvelle relation:
New property name => user
Field type => relation
Classe => User
Relation Type?=> ManyToOne
Post category null? => NO
Add new property to category? => Yes
New field name inside Category => Yes
Automatically delete => NO

Puis on l'enregistre sur la BDD:
php bin/console doctrine:schema:update --force

****************************
ATELIER
****************************
En vous appuyant sur les notions vu ensemble ce matin ; vous devez mettre en place les éléments suivant sur votre projet e-shop :

1. Créer votre fichier "base.html.twig" puis en vous aidant du framework CSS boostrap et de l'héritage de thème TWIG ; mettez en place vos pages : Accueil, Catégories et Produit.

2. Créer ensuite vos différentes entités : Product, Category et User.
Vous mettrez aussi en place les relations entres-elles.
Attention, dans cet exercice, un produit peut être dans plusieurs catégories.

3. BONUS / CHALLENGE : En vous aidant de la documentation de symfony sur les fixtures ; vous mettrez en place dans le fichier AppFixtures des données de démonstration pour les catégories, users et articles.
https://symfony.com/doc/current/bundles/DoctrineFixturesBundle/index.html#writing-fixtures

php bin/console d:s:v ==> pour voir la console


class AppFixtures extends Fixture
{
    public function load(ObjectManager $manager)
    {

        // todo create user
        $user = new User();
        $user->setFirstname('Jane');
        $user->setLastname('DOE');
        $user->setPassword('janedoe');
        $user->setRoles(['ROLE_USER']);

        // create 20 products! Bam!
        for ($i = 0; $i < 20; $i++) {
            $product = new Product();
            $product->setName('product '.$i);
            $product->setProduct('lorem ipsum');
            $product->setPrice(mt_rand(10, 100));
            $product->setUser($user);

            $manager->persist($user);
            $manager->persist($product);
        }

        $manager->flush();
    }

CORRECTION BONUS
https://github.com/hugoliegeard/eShop/blob/master/src/DataFixtures/AppFixtures.php

*****************************************************
***************** MERCREDI 07 AVRIL *****************
*****************************************************

LES FIXTURES

https://symfony.com/doc/current/bundles/DoctrineFixturesBundle/index.html

https://github.com/FakerPHP/Faker

Va générer des phrases, des noms ect. Un peu plus proche de la réalité que juste du lorem ipsum
https://fakerphp.github.io/

On installe les fixtures dans le terminal avec la commande:
symfony composer require --dev orm-fixtures
Le dossier DataFixtures arrive dans notre dossier src, avec le fichier AppFixtures.php

Puis on installe les fakers avec la commande:
composer require fakerphp/faker

On mets nos fixtures sur notre fichiers appFixtures puis on mets dans le terminal:
php bin/console doctrine:fixtures:load

php bin/console doctrine:schema:update --force

*****************************************************
***************** JEUDI 08 AVRIL *****************
*****************************************************
LE FORMULAIRE
La doc pour choisir les Type que l'on met sur notre POstController pour creer le formulaire
https://symfony.com/doc/current/forms.html#form-types
https://symfony.com/doc/current/reference/forms/types.html


Pour mettre boostrap sur notre formulaire
https://symfony.com/doc/current/form/bootstrap4.html
On va sur:
config -> packages -> twig.yaml
on met le code: form_themes: ['bootstrap_4_layout.html.twig']

liens CSS:
https://webpack.js.org/
https://www.alsacreations.com/tuto/lire/1754-debuter-avec-webpack.html

Editeur qui genere le code html des textes
https://ckeditor.com
https://cdn.ckeditor.com -> pour récupérer les codes à mettre dans notre projet

On met le code ci dessous dans notre fichier create.html.twig, dans un block javascript:
<script src="https://cdn.ckeditor.com/ckeditor5/27.0.0/classic/ckeditor.js"></script>
<script>
        ClassicEditor.create( document.querySelector( '#form_content' ) );
</script>


CORRECTION DE L'ERREUR DE L'ATELIER

dans la console:
php bin/console d:s:u -f

php bin/console m:e Product

new property name -> categories
field type -> relation
what class should this entity be related to -> Category
what type of relationship -> ManyToMany
new property to Category -> yes
new field name inside Category [products] -> entrer
andd another-> enter

php bin/console d:f:l
purged -> yes

On vide les caches
php bin/console c:c

*****************************************************
***************** VENDREDI 09 AVRIL *****************
*****************************************************

VALIDATION DU FORMULAIRE
https://symfony.com/doc/current/validation.html
https://symfony.com/doc/current/validation.html#basic-constraints

Dans notre fichier Post.php on mets des Asserts dans nos privates:
Dans la partie commentaire au dessus de chaque private $ on choisis les vérifications que l'on souhaite faire.
Ici par exemple:

/**
     * @ORM\Column(type="string", length=255)
     * @Assert\Image(mimeTypesMessage="Attention, véérifier le format de votre image.")
     * @Assert\NotBlank(message="Vous devez choisir une image")
     */
    private $image;

On a mis un @Assert\Image pour indiquer à l'utilisateur de vérifier le format
On a mis un @Assert\NotBlank pour rendre l'image obligatoire à la validationd e l'article

PUIS ON VA DANS LE FICHIER PostController

Dans notre public function create on ajoute un paramètre:
La classe Request $request
!!!! il y a 4 CLasses qui porte le nom "Request" - FAIRE ATTENTION
on selectionne le request 'httpFoundation' !!!

Traitement du Formulaire:
Puis sous notre -> getForm(); et avant notre return on ajoute:
$form->handleRequest($request);

Puis on vérifie que le formulaire à été envoyer et qu'il est valide
 if( $form->isSubmitted() && $form->isValid()){
            dd($post);
        }

        dd= équivalant d'un varDump

        Ensuite on ouvre notre create.html.twig et on ajoute:
        {{ form(form, {attr: {novalidate: 'novalidate'}}) }}
        dans notre div afin de permettre d'afficher le formulaire

On retourne sur notre PostController.php
On fait un dump($post); dans notre public function create  puis on retourne sur le navigateur et on soumet un artcile
En envoyant le formulaire on a les 2 vardump qui apparaissent à l'acran
le premier vide -> avant soumission du formulaire
le deuxième -> avec les informations que l'on a rentrer
Symfony a validé les informations soumis dans le formulaire avant de les valider

On retourne au traitement du formulaire =

Ajout de l'image:
https://symfony.com/doc/current/controller/upload_file.html
On récupère le code sur la doc et on le colle dans notre if($form...)
On modifie pour mettre $image
On importe la classe UploadedFile et le FileException

Puis on ajoute dans les paramètre de notre public function create la class et variable:
SluggerInterface $slugger
Nous permet de générer des alias

Puis on va stoker les images donc on va dans:
config->service.yaml
dans 'parameters:' on colle:
brochures_directory: '%kernel.project_dir%/public/uploads/brochures'
ICI on modifie le 'brochures' par 'image' et le dossier 'brochures' par 'image'
Donc on retourne sur notre PostController et on modifie le paramètre de notre getParameter:
try {
    $image->move(
        $this->getParameter('images_directory'),
        $newFilename
    );

Dans sauvegarde de la BDD
$em = entity manager

_________________________
On supprime les articles dans la bdd directement e phpMyAdmin

On va dans notre fichier index.html.twig:
-> dans la balise img on modifie la src en mettant asset('')
-> <img src="{{ asset('uploads/images/' ~ post.image) }}"
(on va chercher les images dans le dossier uploads qui s'est créé:
-> public -> uploads -> images)

Notification de confirmation:
On ajoute dans notre postcontroller:
$this->addFlash('success', "Félicitations, votre article est en ligne.");

https://symfony.com/doc/current/controller.html#flash-messages

Puis On ajoute le message dans notre post.html.twig:
{% for message in app.flashes('success') %}
     <div class="alert alert-success">
        {{ message }}
     </div>
{% endfor %}


*****************************************************
***************** LUNDI 10 AVRIL *****************
*****************************************************

Formulaire d'inscription

On va sur UserController et on note la @Route (/user/register)

On ajoute "inscription" dans le fichier nav.html.twig

On ajoute le fichier register.html.twig dans le return, puis en cliquant dessus il se créer

puis on retourne sur UserController dans la public function:
(AbstractController contient toutes les fonctions qu'on utilise)

On créer le formulaire:
-> Bien prendre le TextType de symfony form et non doctrine

On ajoute le Request $request dans la fonction
-> Bien prendre 'Request httpFoundation'

On fait ensuite l'enregistrement en BDD
-> Ajouter le |POST dans la method avec le GET
-> bien mettre isSubmitted() avant le isValid() dans le traitement de formulaire
-> on ajoute UserPasswordEncoderInterface $encoder dans la public fonction pour encoder le mot de passe
Et on ajoute le code ci dessous dans le if de notre traitement du formulaire:
$user->setPassword(
    $encoder->encodePassword(
        $user,
        $user->getPassword()
    )
);

-> on va dans le fichier User.phh, on ajoute dans les commentaires de la class User:
@UniqueEntity(
 *     fields={"email"},
 *     message="Ce compte existe déjà!"
 * )
=> permet de ne prévenir l'utilisateur si l'adresse mail est déjà enregistrer en BDD

-> on ajoute ensuite le flash.

Puis on passe sur la console pour l'authentification:

php bin/console make:auth
-> what style of authentification = [1]
-> class name of authentification = AppLoginAuthenticator (on choisis le nom)
-> name for the controller class (par defautl SecurityController)  = entrer
-> générer un logout = yes

On a un dossier Security qui s'est crée dans src
-> on trouve le fichier AppLoginAuthenticator.php
ligne 100, a la fin du fichier:
 -> on efface le throw new \Exception() et on décommente le 'return new RedirectResponse'
 -> on met notre page 'index' dans le ->generate

 On ouvre le fichier SecurityController.php dans le dossier controller (qui s'est crée)
 ->on peut modifier la route de nos fonctions si on le souhaite:
 ici on ajoute /user devant notre /login et logout dans le @Route

 On retourne ensuite sur notre nav.html.twig pour ajouter le lien 'login'.
 On peut modifier les css et le texte sur le fichier login.html.twig dans le dossier security.


On retroune sur notre nav.html.twig:
-> ajout du lien de déconnexion dans la nav
-> on met = {{ dump(app.user) }} sous la nav pour vérifier si un utilisateur est connecté ou non
-> On ajoute une condition pour vérifier que l'utilisateur est connecté =
si il est connecter j'affiche 'déconnexion' dans la nav,
sinon j'affiche 'connexion' et 'inscription' =

{% if is_granted('IS_AUTHENTICATED_FULLY') %}
lien ahref déconnexion et rédiger un article
{% else %}
lien ahref connexion et inscription
{% endif %}

LES ROLES
symfony nous permet de pouvoir choisir des roles pour les utilisateurs. On peut mettre autant de roles que l'on souhaite, la seule contraite est d'avoir toujours le ROLE_ et d'être en majuscule
ex: ROLE_USER
    ROLE_SUSCRIBER (pour les user payant)
    ROLE_AUTHOR (pour les journalistes)
    ROLE_EDITOR (pour le chef de redac)
    ROLE_ADMIN (pour celui qui a tous les acces) etc.L
Les roles ne se déclare pas. Ils doivent juste être dans la BDD.
Dans symfony pour vérifier le role de celui qui se connecte, on ajoute une condition dans ma nav.html.twig:
{% if is_granted('ROLE_AUTHOR') %}
{% endif%}

On peut ajouter autant de role que l'on souhaite, le role d'author ici par exemple devra etre mis manuellement par l'admin dans la bdd ou alors il faudra développer une appli de gestion pour pouvoir changer les roles des utilisateurs.

ATTENTION
Même si on a enlevé le bouton "rediger un article" pour les utilisateur non author, si on a le lien url on y a quand même accés
Comment la rendre accessible uniquement pour les author?

=> AUTORISATION
On va sur post.controller, et on ajoute sur notre public function:
     * @IsGranted("ROLE_AUTHOR")
dans le commentaire au dessus de notre route.
(pour la soutenance, trouver dans la doc comment faire une page d'erreur personnalisé (et ajouter la photo d'Hugo dessus))

-> on va modifier notre role dans phpMyAdmin pour se mettre le ROLE_AUTHOR à la place du ROLE_USER
une fois reconnecté nous avons accés à la page Rédaction d'article et on a le bouton dans la nav.

On peut donner une hierarchie au role:
->config->packages->security.yaml
=>  On indique le code à la fin de la page
   role_hierarchy:
           ROLE_AUTHOR: ROLE_USER
           ROLE_EDITOR: ROLE_AUTHOR
           ROLE_ADMIN: ROLE_EDITOR
     
