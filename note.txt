*****************************************************
***************** VENDREDI 02 AVRIL *****************
*****************************************************

*****************
fichier routes.yaml
on a enlevé le # des commentaires pour laisser les index path et controller sans commentaire

*****************
Shortcut pour phpstorm : https://resources.jetbrains.com/storage/products/phpstorm/docs/PhpStorm_ReferenceCard.pdf?_ga=2.236815939.372208002.1617349536-134175520.1617349536

*****************
Exercice:
1- Créer un nouveau controller : UserController

2- Créer une nouvelle route/user/register

3- Affichez sur la page h1. INSCRIPTION

*****************
Commande de terminal

- pour voir les pages crée:
php bin/console debug:router

*****************
@Route("/category", name="default_category", methods={"GET"})
On va mettre un paramètre de route à la place de "/category" pour pouvoir mettre plusieurs catégorie ex: politique, société etc.
on crée un paramètre et symfony va récupérer l'alias
@Route("/{alias}", name="default_category", methods={"GET"})

*****************
TWIG
https://twig.symfony.com/

{{ }} = echo dans php

*****************************************************
***************** MARDI 06 AVRIL *****************
*****************************************************

*****************
BASE DE DONNEES

Pour mettre en place une base de données sur Symfony (ORM = object relation maping)

Configuration BDD:
Dans le projet Actuel News -> .env -> DATABASE_URL=« « 

les fichiers env. sont des fichiers d'environnements
éditer des variables en fonction d'ou on se situe
.env.local va prendre le dessus de .env mais uniquement sur notre machine. Pas pour vocation d'être partager uniquement pour nous.
On y configure notre base de données
On remplace:
DATABASE_URL="mysql://db_user:db_password@127.0.0.1:3306/db_name?serverVersion=5.7"
par:
DATABASE_URL="mysql://root:root@127.0.0.1:8889/actunews?serverVersion=5.7"

Permet de créer la BDD depuis le fichier .env et .env.local
On note la commande ci-dessous dans le terminal de phpStorm
php bin/console doctrine:database:create

Pour créer des classes:
php bin/console make:entity Category (=nom de la classe avec la Maj)

Puis on lui attribut des propriétés:
ici on mets juste => name
puis => string entrer
puis caractère => 80
puis sans nom => no ou entrer
puis est-ce que j'ai une autre propriété? On ajoute l'alias => alias
puis => string entrer
puis caractère => 80
puis no
puis entrer 2 fois

===> SYMFONY A CREE LA CLASSE POUR NOUS (sur src->Entity->Category.php)
Symfony peut faire la mise en place sql

Pour refaire une classe ARTICLE il faut fermer et rouvrir le terminal, vérifier qu'on est bien sur le dossier et remettre la commande:
php bin/console make:entity Post (ici le nom de la classe c'est Post)
Propriété => title
Type=> entrer string
Length=> entrer 255
fields null => entrer

Autres propriété?=> alias
Puis propriété => image
Type=> entrer string
Length=> entrer 255
fields null => entrer

Puis propriété content
Type=> text
fields null => NO

*****************
CREATION DES UTILISATEURS

Il faut OBLIGATOIREMENT faire la commande ci-dessous en premier si on a une table qui va contenir des utilisateurs:
php bin/console make:user
puis entrer à chaque question=> user => yes => property => yes

Puis on ajoute des propriétés:
php bin/console make:entity User

Puis new propriété name => firstname
puis string =>entrer
puis lenght =>80
puis field => entrer (no)

Puis new propriété name => lastname
puis string =>entrer
puis lenght =>80
puis field => entrer (no)

Entrer pour sortir

Pour automatiquement mettre notre base de donnée à jour:
php bin/console doctrine:schema:update --force

Il crée mes 3 tables (catégory, post et user) dans PhpMyAdmin
Toutes les modifications se font uniquement dans nos entités
On ne fait pas de modification de nos propriétés sur PhpMyAdmin, on va sur le fichier de notre entité (exemple post.php)
Puis on refait la commande pour mettre à jour la BDD.


php bin/console doctrine:database:drop --force ===>>> supprimer la BDD


*****************
CREER DES RELATIONS ENTRE LES TABLES DE LA BDD

On se met sur l'entité POST:
php bin/console make:entity Post
New property name => Category
Si on veut 1 cat par artcile category si plusieurs cat par article categories au pluriel
Field type => relation
Classe => Category
Relation Type?=> ManyToOne
Post category null? => NO
Add new property to category? => Yes
New field name inside Category => Yes
Automatically delete => no

Puis on ajoute une nouvelle relation:
New property name => user
Field type => relation
Classe => User
Relation Type?=> ManyToOne
Post category null? => NO
Add new property to category? => Yes
New field name inside Category => Yes
Automatically delete => NO

Puis on l'enregistre sur la BDD:
php bin/console doctrine:schema:update --force

****************************
ATELIER
****************************
En vous appuyant sur les notions vu ensemble ce matin ; vous devez mettre en place les éléments suivant sur votre projet e-shop :

1. Créer votre fichier "base.html.twig" puis en vous aidant du framework CSS boostrap et de l'héritage de thème TWIG ; mettez en place vos pages : Accueil, Catégories et Produit.

2. Créer ensuite vos différentes entités : Product, Category et User.
Vous mettrez aussi en place les relations entres-elles.
Attention, dans cet exercice, un produit peut être dans plusieurs catégories.

3. BONUS / CHALLENGE : En vous aidant de la documentation de symfony sur les fixtures ; vous mettrez en place dans le fichier AppFixtures des données de démonstration pour les catégories, users et articles.
https://symfony.com/doc/current/bundles/DoctrineFixturesBundle/index.html#writing-fixtures

php bin/console d:s:v ==> pour voir la console


class AppFixtures extends Fixture
{
    public function load(ObjectManager $manager)
    {

        // todo create user
        $user = new User();
        $user->setFirstname('Jane');
        $user->setLastname('DOE');
        $user->setPassword('janedoe');
        $user->setRoles(['ROLE_USER']);

        // create 20 products! Bam!
        for ($i = 0; $i < 20; $i++) {
            $product = new Product();
            $product->setName('product '.$i);
            $product->setProduct('lorem ipsum');
            $product->setPrice(mt_rand(10, 100));
            $product->setUser($user);

            $manager->persist($user);
            $manager->persist($product);
        }

        $manager->flush();
    }

CORRECTION BONUS
https://github.com/hugoliegeard/eShop/blob/master/src/DataFixtures/AppFixtures.php

*****************************************************
***************** MERCREDI 07 AVRIL *****************
*****************************************************

LES FIXTURES

https://symfony.com/doc/current/bundles/DoctrineFixturesBundle/index.html

https://github.com/FakerPHP/Faker

Va générer des phrases, des noms ect. Un peu plus proche de la réalité que juste du lorem ipsum
https://fakerphp.github.io/

On installe les fixtures dans le terminal avec la commande:
symfony composer require --dev orm-fixtures
Le dossier DataFixtures arrive dans notre dossier src, avec le fichier AppFixtures.php

Puis on installe les fakers avec la commande:
composer require fakerphp/faker

On mets nos fixtures sur notre fichiers appFixtures puis on mets dans le terminal:
php bin/console doctrine:fixtures:load


